// <auto-generated />
using System;
using InsuranceExamGAP_ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InsuranceExamGAP_ORM.Migrations
{
    [DbContext(typeof(InsuranceContext))]
    [Migration("20190426212610_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            FullName = "Jose Madrigal"
                        },
                        new
                        {
                            ClientId = 2,
                            FullName = "Gerardo Madrigal"
                        },
                        new
                        {
                            ClientId = 3,
                            FullName = "Laura Marin"
                        },
                        new
                        {
                            ClientId = 4,
                            FullName = "Cotton Candy"
                        });
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.ClientPolicy", b =>
                {
                    b.Property<int>("ClientPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("PolicyId");

                    b.HasKey("ClientPolicyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PolicyId");

                    b.ToTable("ClientPolicies");
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<double>("PolicyCost");

                    b.Property<DateTime>("PolicyDateBegin");

                    b.Property<int>("PolicyMonthsPeriod");

                    b.Property<int>("PolicyTypeId");

                    b.Property<int>("RiskTypeId");

                    b.HasKey("PolicyId");

                    b.HasIndex("PolicyTypeId");

                    b.HasIndex("RiskTypeId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.PolicyType", b =>
                {
                    b.Property<int>("PolicyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<double>("PolicyCover");

                    b.HasKey("PolicyTypeId");

                    b.ToTable("PolicyTypes");

                    b.HasData(
                        new
                        {
                            PolicyTypeId = 1,
                            Name = "Incendio",
                            PolicyCover = 0.69999999999999996
                        },
                        new
                        {
                            PolicyTypeId = 2,
                            Name = "Terremoto",
                            PolicyCover = 0.69999999999999996
                        },
                        new
                        {
                            PolicyTypeId = 3,
                            Name = "Robo",
                            PolicyCover = 0.40000000000000002
                        },
                        new
                        {
                            PolicyTypeId = 4,
                            Name = "Perdida",
                            PolicyCover = 0.29999999999999999
                        });
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.RiskType", b =>
                {
                    b.Property<int>("RiskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RiskTypeId");

                    b.ToTable("RiskTypes");

                    b.HasData(
                        new
                        {
                            RiskTypeId = 1,
                            Name = "Bajo"
                        },
                        new
                        {
                            RiskTypeId = 2,
                            Name = "Medio"
                        },
                        new
                        {
                            RiskTypeId = 3,
                            Name = "Medio-Alto"
                        },
                        new
                        {
                            RiskTypeId = 4,
                            Name = "Alto"
                        });
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Role");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.ClientPolicy", b =>
                {
                    b.HasOne("InsuranceExamGAP_ORM.Core.Models.Client", "Client")
                        .WithMany("ClientPolicies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InsuranceExamGAP_ORM.Core.Models.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InsuranceExamGAP_ORM.Core.Models.Policy", b =>
                {
                    b.HasOne("InsuranceExamGAP_ORM.Core.Models.PolicyType", "PolicyType")
                        .WithMany()
                        .HasForeignKey("PolicyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InsuranceExamGAP_ORM.Core.Models.RiskType", "RiskType")
                        .WithMany()
                        .HasForeignKey("RiskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
